class Node{
    int data;
    Node next;
    
    Node(int data){
        this.data=data;
        this.next=null;
    }
}
public class Main
{
    public static void main (String[] args) {
        Node first = new Node(10);
        Node second = new Node(20);
        System.out.println(first.data);
        System.out.println(first.next);
        System.out.println(second.data);
        System.out.println(second.next);
        
        
    }
}
*****************************************************************************************
	class SLL {
	Node head;

	class Node {
		int data;
		Node next;


		Node(int data) {
			this.data=data;
			next = null;
		}

		public void insertAtBeginning(int data) {
			Node newNode = new Node(data);
			newNode.next = head;
			next = null
		}

		public void insertAtEnd(int data) {
			Node newNode = new Node(data);
			if(head==null) {
				head = newNode
				       return
			}

			Node temp = head;
			while(temp.next != null) {
				temp = temp.next;
			}
			temp.next=newNode
		}
		public void insertAtMiddle(int data,int position) {
			if (position == 1) {
				insertAtBeginning(data);
				return;
			}

			Node newNode = new Node(data);
			Node temp = head;
			for(int i =1; i<position 1 && temp!=null; i++) {
				temp = temp.next
			}

			if(temp == null) {
				System.out.println("position out of range");
				return
			}

			newNode.next = temp.next;
			temp.next = newNode
		}

		public void deleteAtBegining() {
			if(head == null) {
				System.out.println("List is empty");
				return
			}
			head = head.next;
		}
		public void deleteAtEnd() {
			if(head == null) {
				System.out.println("List is empty");
				return
			}
			
			if (head.next == null){
			    head = null;
			    return
			}
			Node temp = head;
			while(temp.next !=null){
			    temp = temp.next
			}
			temp.next = null
		}
	}
